{
  "title": "Version Control History",
  "subtitle": "Praesent eget neque eu eros interdum malesuada",
  "path": "version-control-history",

  "plains": [
    {
      "generation": "begenings",
      "name": "SCCS",
      "year": "1972",
      "picture_url": "wright-brothers.png",
      "picture_caption": "Wright Brothers",
      "body": "<p>SCCS goes back to 1972, and was later ported to Unix. CSSC (\"Compatibly Stupid Source Control\") is GNU's clone of SCCS; it's still maintained, but not recommended for general use.</p><p>The CSSC documentation says \"GNU CSSC was originally based on the public-domain package MySC, which was written by Ross Ridge.\"</p>",
      "poll": "http://static.polldaddy.com/p/7598863.js",
      "source": "<p><strong>Source:</strong> comments from <a href='http://codicesoftware.blogspot.com/2010/11/version-control-timeline.html' target='_blank'>here</a>"
    },
    {
      "generation": "begenings",
      "name": "CMS",
      "year": "1978",
      "picture_url": "montgolfiere.png",
      "picture_caption": "Montgolfière Ballon",
      "body": "<p>OpenVMS has a version control system called CMS (Code Management System). Also left out Digital Equipment Corporation's CMS (Code Management System) from the late 1970's, probably still used on some VMS systems. CMS <a href='http://vms.cc.wmich.edu/www/vms_software.html#CMS' target='_blank'>CMS</a></p><p>It was only available on VMS (now on OpenVms).</p><p>It was full featured and had a great command line and X-Windows interface.</p>",
      "poll": "http://static.polldaddy.com/p/7598854.js",
      "source": "<p><strong>Source:</strong> comments from <a href='http://codicesoftware.blogspot.com/2010/11/version-control-timeline.html' target='_blank'>here</a>"
    },
    {
      "generation": "begenings",
      "name": "Update",
      "full_name": "UPDATE",
      "year": "1969",
      "picture_url": "begenings-group.png",
      "body": "<p>My first version control system was called UPDATE, available on the CDC6600 and later Seymour Cray origin systems. Circa 1969.</p>",
      "poll": "http://static.polldaddy.com/p/7599664.js",
      "source": "<p><strong>Source:</strong> comments from <a href='http://codicesoftware.blogspot.com/2010/11/version-control-timeline.html' target='_blank'>here</a>"
    },
    {
      "generation": "begenings",
      "name": "Nameless",
      "full_name": "Delta Decks on Punch Cards",
      "year": "1960",
      "picture_url": "begenings-group.png",
      "body": "<p>If you really want to to truly ancient history, you have to go back to delta decks on punch cards. That was 780's for me, I don't remember the name.</p>",
      "poll": "http://static.polldaddy.com/p/7599670.js",
      "source": "<p><strong>Source:</strong> comments from <a href='http://codicesoftware.blogspot.com/2010/11/version-control-timeline.html' target='_blank'>here</a>"
    },
    {
      "generation": "ww1",
      "name": "RCS",
      "year": "1982",
      "picture_url": "focker.png",
      "picture_caption": "Fokker DR1",
      "body": "<p>Then 1982 came and RCS was released. RCS is not a huge piece of technology, but you can still find it around in Unix distros. It is simple and straight to the point.</p><p>One nice feature was that text changes were stored as deltas (pretty important, considering hard drives used to be small!). Deltas are still used nowadays by most SCMs.</p><p>Some RCS drawbacks worth mentioning:<ul><li>It is text only.</li><li>There is no central repository; each version-controlled file has its own repo, in the form of an RCS file, stored near the file itself. For example, the RCS file for /usr/project/foo.c is /usr/project/foo.c,v -- or a little better, in a subdirectory, /usr/project/RCS/foo.c,v.</li><li>Developers make private workspaces by creating symbolic links to RCS subdirectories – say, a symlink from /usr/home/john/RCS to /usr/project/RCS.</li><li>Naming of versions and branches is downright hostile. A version might be named 1.3, and a branch might be named 1.3.1, and a version on the branch might be named 1.3.1.7.</li></ul></p>",
      "poll": "http://static.polldaddy.com/p/7598871.js"
    },
    {
      "generation": "ww1",
      "name": "EnvyDeveloper",
      "full_name": "Envy Developer",
      "picture_url": "ww1-group.png",
      "body": "<p>￼ENVY/Developer is a source code and configuration management system for￼<a href='http://c2.com/cgi/wiki?SmalltalkLanguage' target='_blank'> SmalltalkLanguage</a> and <a href='http://c2.com/cgi/wiki?JavaLanguage' target='_blank'>JavaLanguage</a>, offered by IBM, and integrated into their￼<a href='http://c2.com/cgi/wiki?VisualAge' target='_blank'> VisualAge</a> family of products.</p>",
      "poll": "http://static.polldaddy.com/p/7599660.js",
      "source": "<p><strong>Source:</strong> <a href='http://c2.com/cgi/wiki?EnvyDeveloper' target='_blank'>here</a>"
    },
    {
      "generation": "ww1",
      "name": "Aide De Camp",
      "full_name": "Aide-De-Camp",
      "year": "1984",
      "picture_url": "ww1-group.png",
      "body": "<p>Another obscure one, I once used: Aide-De-Camp from 1984. Far more powerful than RCS etc. However when I was I using it (early 90's) it was too slow. Cheers Mark Levison Agile Pain Relief Consulting.</p>",
      "poll": "http://static.polldaddy.com/p/7599675.js",
      "source": "<p><strong>Source:</strong> comments from <a href='http://codicesoftware.blogspot.com/2010/11/version-control-timeline.html' target='_blank'>here</a>"
    },
    {
      "generation": "ww1",
      "name": "Cpold",
      "full_name": "cpold",
      "picture_url": "ww1-group.png",
      "body": "<p>It seems you miss cpold in the list (reference :  <a href='http://roland.entierement.nu/blog/2008/01/22/cpold-la-poudre-verte-du-suivi-de-versions.html' target='_blank'>here</a> in french) ;-)</p>",
      "poll": "http://static.polldaddy.com/p/7599663.js",
      "source": "<p><strong>Source:</strong> comments from <a href='http://codicesoftware.blogspot.com/2010/11/version-control-timeline.html' target='_blank'>here</a>"
    },
    {
      "generation": "ww1",
      "name": "Visible Razor",
      "picture_url": "ww1-group.png",
      "body": "<p>Visible Razor is a commercial product which was very much a client-server tool which only allowed one user to check out a file at a time. It did have one interesting feature: every check out or commit of a file needed to have an issue (from the integrated issue tracker) associated with it.</p>",
      "poll": "http://static.polldaddy.com/p/7599677.js",
      "source": "<p><strong>Source:</strong> comments from <a href='http://codicesoftware.blogspot.com/2010/11/version-control-timeline.html' target='_blank'>here</a>"
    },
    {
      "generation": "interwar",
      "name": "CVS",
      "year": "1990",
      "picture_url": "fiat.png",
      "picture_caption": " Fiat G.50B",
      "body": "<p>It all started with CVS (Concurrent Version System) in 1990. It was able to handle multiple versions being developed concurrently on different machines and stored on a central server. The client-server age was upon us and developers took major advantage out of it.</p><p>CVS was able to handle versions in a decent way. And it even supported branching and merging, though it wasn’t very good at doing it. That’s one of the reasons many people are scared about the \"branch\" word and the \"merge\" words.</p><p>CVS didn’t track directories or filename changes (no refactoring allowed here!) and heavily relied on locking the whole repository. It is outdated now, but it worked in the 90s! (If you have it, just walk away and go on to something else!)</p>",
      "poll": "http://static.polldaddy.com/p/7599226.js"
    },
    {
      "generation": "interwar",
      "name": "Microsoft Delta",
      "picture_url": "interwar-group.png",
      "body": "<p>It was the internal software used by Microsoft, MS saw an opportunity to cash in on the niche and productized it. It got replaced by VSS when MS acquired OneTreeSoftware.</p><p><a href='http://c2.com/cgi/wiki?MicrosoftDelta' target='_blank'>http://c2.com/cgi/wiki?MicrosoftDelta</a></p>",
      "poll": "http://static.polldaddy.com/p/7599679.js",
      "source": "<p><strong>Source:</strong> comments from <a href='http://codicesoftware.blogspot.com/2010/11/version-control-timeline.html' target='_blank'>here</a>"
    },
    {
      "generation": "interwar",
      "name": "DSEE",
      "picture_url": "interwar-group.png",
      "body": "<p>DSEE on Apollo workstations was the predecessor to ClearCase</p><p>DSEE is Domain Software Engineering Environment.</p><p>One of the big deals was the build system and the concept of using dynamic and bound configuration threads as part of the system.</p>",
      "poll": "http://static.polldaddy.com/p/7599682.js",
      "source": "<p><strong>Source:</strong> comments from <a href='http://codicesoftware.blogspot.com/2010/11/version-control-timeline.html' target='_blank'>here</a>"
    },
    {
      "generation": "interwar",
      "name": "BCS",
      "picture_url": "interwar-group.png",
      "body": "<p>Does anyone remember BCS? (Baseline Configuration System.) We used to use it as an add-on to CVS. It used links to shared files in a baseline checkout unless you were editing the file. Complete nightmare! It seems to have disappeared without trace now though.</p>",
      "poll": "http://static.polldaddy.com/p/7599684.js",
      "source": "<p><strong>Source:</strong> comments from <a href='http://codicesoftware.blogspot.com/2010/11/version-control-timeline.html' target='_blank'>here</a>"
    },
    {
      "generation": "ww2",
      "name": "PVCS",
      "year": "1985",
      "picture_url": "zero.png",
      "picture_caption": "Mitsubishi A6M Zero",
      "body": "<p>Polytron Version Control System (PVCS) was initially released in 1985 and then went through a series of mergers and acquisitions: Polytron, then Sage, Merant, and finally Serena.</p><p>It’s an old, outdated system (initially designed to avoid branching/merging, using file-locking instead), but it’s still supported by Serena Software.</p>",
      "poll": "http://static.polldaddy.com/p/7599234.js"
    },
    {
      "generation": "ww2",
      "name": "Subversion",
      "year": "2000",
      "picture_url": "spitfire.png",
      "picture_caption": "Supermarine Spitfire",
      "body": "<p>Subversion (SVN) was conceived as “enhanced CVS” and its developers hit their target: it is better than CVS. Period.</p><p>While it was created in 2000 (much later than the other version control systems in this age) it used quite outdated concepts and that’s why it is classified here.</p><p>Although systems like ClearCase were perfectly capable of branching and merging already, SVN educated an entire developer generation on the following dogma: fear branching and merging at all cost! This caused environmental damage that persists to this day, only starting to be healed by the new DVCS generation.</p><p>SVN was close to P4 in features, and spread like crazy: more than 5 million developers around the world use SVN on a daily basis. Huge!</p><p>SVN is extremely simple to use and evangelized everyone on the “mainline development model”. Error-prone (break the build!) on non-toy projects, it helped developed techniques like “continuous integration” as a way to “avoid integrations”. While the idea is good, most of the surrounding concepts were clearly limited by the tool itself.</p><p>Linus himself raged against SVN when he first introduced Git back in 2006.</p><p>During 2009 and 2010, all major open-source projects on earth gravitated away from SVN. A good sign of how wrong SVN was. But it’s still big and won’t die for ages.</p>",
      "poll": "http://static.polldaddy.com/p/7599240.js"
    },
    {
      "generation": "ww2",
      "name": "VSS",
      "year": "1994",
      "picture_url": "me-262.png",
      "picture_caption": "Messerschmitt Me 262",
      "body": "<p>Visual Source Safe was the first version control for many developers. It forced to use a “locking” approach, discouraging parallel development and creating a huge \"fear of merging\".</p><p>Slow, error prone, and utterly limited, VSS has been one of the most-used systems by Windows developers around the world. It is still in use, spreading pain and fear among good- hearted coders.</p><p>VSS was entirely graphical, which was probably one of the reasons why it was widely adopted (along with being closely tied in with Visual Studio distributions).</p>",
      "poll": "http://static.polldaddy.com/p/7599244.js"
    },
    {
      "generation": "korean-war",
      "name": "Clearcase",
      "full_name": "ClearCase",
      "year": "1992",
      "picture_url": "f4-phantom.png",
      "picture_caption": "McDonnell Douglas F-4",
      "body": "<p>In 1992, one of the major beasts in the SCM world was born. ClearCase was clearly ahead of its time and for some it is still the most powerful SCM ever built.</p><p>Outdated, slow moving, overpriced, and overly complicated to administer (in the early days, you had to generate a new Unix kernel to run the beast!), good-old CC isn’t the cool guy anymore -- you can hardly find anything positive about it on the net. But it’s still very good at branching and merging and still has unique features, such as its legendary “dynamic views”. While powerful, CC came from a time when disk space was scarce and networks were mostly LANs, with no concerns for things like latency or working through firewalls.</p><p>Atria (the developer of ClearCase) merged with Pure (which was run by Reed Hastings, later the head of Netflix), was purchased by Rational and then IBM. And lo, the powerful CC stopped evolving. Well, it did evolve towards UCM in the early 2000s, which basically got rid of all the good things and left the weak ones, together with a huge price. Not a very good idea.</p><p>ClearCase is still one of the most-used SCMs in the corporate world, and certainly one of the revenue leaders.</p>",
      "poll": "http://static.polldaddy.com/p/7599247.js"
    },
    {
      "generation": "korean-war",
      "name": "StarTeam",
      "year": "1995",
      "picture_url": "korean-group.png",
      "body": "<p>StarTeam was developed by Starbase Corporation, later acquired by Borland which in turn was purchased by Micro Focus.</p><p>It was originally released in 1995 and it is still under development.</p>",
      "poll": "http://static.polldaddy.com/p/7599688.js",
      "source": "<p><strong>Source:</strong> <a href='http://en.wikipedia.org/wiki/StarTeam' target='_blank'>here</a>"
    },
    {
      "generation": "korean-war",
      "name": "Rational CMVC",
      "year": "1992",
      "picture_url": "korean-group.png",
      "body": "<p>Rational CMVC anyone (1990ish) or is that a little too obscure for anyone else? It had views based on activities and only ran on Rational's own R1000 hardware, although it did turn up later on Suns.</p>",
      "poll": "http://static.polldaddy.com/p/7599691.js",
      "source": "<p><strong>Source:</strong> comments from <a href='http://codicesoftware.blogspot.com/2010/11/version-control-timeline.html' target='_blank'>here</a>"
    },
    {
      "generation": "korean-war",
      "name": "Continuus CM",
      "full_name": "Continuus/CM <em>Telelogic CM Synergy</em>",
      "picture_url": "korean-group.png",
      "body": "<p>Continuus/CM (which is now also taken over by IBM). It probably combines all the bad features of all other commercial SCM, while being glacially slow, horribly expensive, a prime example of terminally inconsistent interfacing (I support this SCM from hell already 10 years).</p>",
      "poll": "http://static.polldaddy.com/p/7599695.js",
      "source": "<p><strong>Source:</strong> comments from <a href='http://codicesoftware.blogspot.com/2010/11/version-control-timeline.html' target='_blank'>here</a>"
    },
    {
      "generation": "4th",
      "name": "Perforce",
      "year": "1995",
      "picture_url": "F-14.png",
      "picture_caption": "Grumman F-14 Tomcat",
      "body": "<p>F-14 is a legend in the jet fighter world and P4 is a legend in the version control space. Probably both are a little bit outdated but they have been there for a while and they made history.</p><p>Perforce (P4) is one of the independent vendors totally focused on version control, battling for the SCM gold. It is still one of the market leaders among mid-range companies with huge teams, and it has a strong presence in some market niches, such as the gaming industry.</p><p>When it was released in the mid 90s, P4 was one of the most affordable and powerful systems to date. Worlds ahead of VSS and CVS, it was never at the level of Clearcase. But it was able to clearly beat CC in cost, performance, and ease of use.</p><p>Being centralized and not very good with branching and merging (branches are implemented as subdirectory trees – although they got slightly better with streams in the latest releases) P4 doesn’t seem to be the best option for the future, but it is rock solid, mature, and well established. That will help it keep growing. At the time of this writing, P4 is the biggest code repository inside Google. Cool!</p>",
      "poll": "http://static.polldaddy.com/p/7599261.js"
    },
    {
      "generation": "4th",
      "name": "Accurev",
      "year": "2000",
      "picture_url": "mirage.png",
      "picture_caption": "Dassault Mirage 2000",
      "body": "<p>Raised in an age of darkness (when SVN ruled the world), AccuRev was developed as an entirely new approach to source control. Its original way of doing things still seems new to lots of developers nowadays.</p><p>AccuRev has strong support for branching (“streams” in its jargon) and merging. It has played a valuable role in helping the community move away from ClearCase and older tools like CVS.</p>",
      "poll": "http://static.polldaddy.com/p/7599268.js"
    },
    {
      "generation": "4th",
      "name": "TFS",
      "year": "2005",
      "picture_url": "galaxy.png",
      "picture_caption": "Lockheed C-5 Galaxy",
      "body": "<p>Microsoft, wanting to play a role in the SCM/ALM market, came up with Team Foundation Server (TFS). It’s an effort to heal the pain caused by its own VSS devil.</p><p>While TFS is not very strong as a source-control system (kind of a new guy on the block, but using previous-generation technology), it comes fully packaged with a huge set of tools, from issue tracking to test management, in the pure \"corporate-huge-integrated-thing-style\".</p><p>You won’t be doing branching, merging, or DVCS if you go for it, but maybe your company already purchased it, along with an MSDN subscription.</p><p>We didn’t associate a fighter jet to TFS because independently of how good it is, it is not definitely a fast moving, agile, and intuitive version control. Not a jet fighter.</p>",
      "poll": "http://static.polldaddy.com/p/7599249.js"
    },
    {
      "generation": "4th",
      "name": "IBM RTC",
      "full_name": "RTC",
      "year": "2005",
      "picture_url": "B-52.png",
      "picture_caption": "Boeing B-52 Stratofortress",
      "body": "<p>Initially released in 2005 Rational Team Concert (also known as Jazz) is not only a version control system but a full ALM deeply integrated with the IBM Eclipse code.</p><p>We didn’t use a jet fighter to illustrate RTC but a slow and heavy weight B-52 bomber. It definitely has a lot of power but it won’t get you there fast.</p>",
      "poll": "http://static.polldaddy.com/p/7599257.js"
    },
    {
      "generation": "4th",
      "name": "GNU Arcs",
      "year": "2001",
      "full_name": "GNU Arch",
      "picture_url": "4th-group.png",
      "body": "<p>Initially released back in 2001 Arch was one of the first distributed version control systems. Arch is an open source project.</p><p>Arch features advanced branching and merging and the ability to add cryptographic signatures.</p><p>It was critized for being difficult to use and to have a too large command set.</p>",
      "poll": "http://static.polldaddy.com/p/7599702.js",
      "source": "<p><strong>Source:</strong> <a href='http://www.gnu.org/software/gnu-arch/' target='_blank'>here</a>"
    },
    {
      "generation": "4th",
      "name": "Aeguis",
      "full_name": "Aegis",
      "year": "1991",
      "picture_url": "4th-group.png",
      "body": "<p>It is an open source version control system heavily linked to test driven development practices.</p><p>It is defined as a ‘transaction based’ software configuration management system.</p>",
      "poll": "http://static.polldaddy.com/p/7599708.js",
      "source": "<p><strong>Source:</strong> <a href='http://aegis.sourceforge.net/' target='_blank'>here</a>"
    },
    {
      "generation": "4th",
      "name": "Monotone",
      "picture_url": "4th-group.png",
      "body": "<p>Body-copy...</p>",
      "poll": "http://static.polldaddy.com/p/7599710.js"
    },
    {
      "generation": "4-5th",
      "name": "Bitkeeper",
      "year": "1999",
      "picture_url": "F-16.png",
      "picture_caption": "General Dynamics F-16 Fighting Falcon",
      "body": "<p>BitKeeper was one of the innovators in the DVCS field. Designed by Larry McVoy (who previously worked on TeamWare, Sun’s internal version control system, built on top of SCCS, long evolution story here...) it rose to fame in 2002 when the Linux kernel development team started using it. A huge flame war started, with some developers complaining about using commercial tools for the world’s premier open-source project.</p><p>Things only got worse in 2005 when fights with the core kernel developers grew even bigger. BitMover, the company behind the product, became concerned about people reverse- engineering their code. They discontinued support for open-source development and, ironically, thus prompted the creation of Git to fill the gap.</p>",
      "poll": "http://static.polldaddy.com/p/7599275.js",
      "source": "<p><strong>Source:</strong> <a href='http://en.wikipedia.org/wiki/Bitkeeper' target='_blank'>here</a>"
    },
    {
      "generation": "4-5th",
      "name": "Darcs",
      "year": "2002",
      "picture_url": "eurofighter.png",
      "picture_caption": "Eurofighter Typhoon",
      "body": "<p>Darcs (Darcs Advanced Revision Control System) is another open source attempt to get rid of CVS and Subversion. It started in 2002 and has been continuously evolving since then.</p><p>The major shortcomings of Darcs have been performance and its different way of handling history: instead of managing “snapshots” (commits or changesets) it manages patches, but in a way that makes traversing history difficult to understand (a current status may have not been a real snapshot).</p>",
      "poll": "http://static.polldaddy.com/p/7599281.js"
    },
    {
      "generation": "5th",
      "name": "Git",
      "picture_url": "F-22.png",
      "picture_caption": "Lockheed Martin F-22 Raptor",
      "body": "<p>Linus Torvalds, the father of Linux himself, designed and implemented the first version of Git (almost over a weekend, in pure-hacker style) to give his kernel developers an alternative to BitKeeper. Linus not only did the original design (simple, clean, genius), but helped promote the project with his unique style. (See <a href=\"http://codicesoftware.blogspot.com/2007/05/linus-torvalds-on-git-and-scm.html\" target=\"_blank\">http://codicesoftware.blogspot.com/2007/05/linus-torvalds-on-git-and-scm.html</a>.)</p><p>During his famous speech, he heavily criticized (ok, insulted) CVS, SVN, and Perforce: “Subversion has been the most pointless project ever started”, “If you like using CVS, you should be in some kind of mental institution or somewhere else” and finally “Get rid of Perforce, it is sad, but it is so, so true”.</p><p>You can love him or hate him, but he definitely made his point: the Middle Ages were over and now distributed systems were to rule the world, including removing the arcane fear of branching and merging, a key concept behind every DVCS.</p><p>During the next years, every major open-source project migrated away from Subversion towards Git (and www.github.com provided a really huge, huge hosting service), making it the strongest and coolest SCM on earth.</p><p>Git is based on a DAG structure (Directed Acyclic Graph), in which the main unit of change is the changeset. It implements full merge-tracking, but at the commit level instead of the individual file revision level (as, for instance, ClearCase does). It is extremely fast, with the only caveats being management of large binary files and the requirement to replicate repositories in their entirety.</p><p>Git is clearly influenced by its kernel roots, and it’s obviously not the easiest thing on earth to use . But it will definitely be the SCM of the next decade. Check out this <a href=\"https://github.com/pluralsight/git-internals-pdf/releases\" target=\"_blank\">awesome book</a>.</p>",
      "poll": "http://static.polldaddy.com/p/7599284.js"
    },
    {
      "generation": "5th",
      "name": "Mercurial",
      "year": "2005",
      "picture_url": "pak-fa.png",
      "picture_caption": "Sukhoi PAK FA",
      "body": "<p>Mercurial (Hg) was first announced on April 2005, also rushing in after the BitMover decision to remove support for the free version. Hg is also one of the key open-source DVCSs, along with Git. They can even work together quite well: Scott Chacon, the Git evangelist and one of the best SCM tech writers ever, wrote a nice integration -- see <a href=\"http://mercurial.selenic.com/wiki/HgGit\" target=\"_blank\">http://mercurial.selenic.com/wiki/HgGit</a>.</p><p>But Hg differs quite a bit from Git in terms of design. They share the concept of commit/changeset as the unit of change. Git implements this based on trees; each tree points to an older tree, and so on – hence the DAG. With Hg, every changeset is a flat list of files and directories, called a revlog.</p><p>(For more on Hg, including internals, see <a href=\"http://mercurial.selenic.com/wiki/Design\" target=\"_blank\"></a> and <a href=\"http://mercurial.selenic.com/wiki/DeveloperInfo\" target=\"_blank\">http://mercurial.selenic.com/wiki/DeveloperInfo</a>.)</p><p>Mercurial provides very strong merging, but it’s a bit different from other SCMs in its branching model: it has “named branches” but the preference is to create a new repository as a separate branch instead of hosting “many heads” inside a single one.</p><p>Joel Spolsky has written an extremely good Hg tutorial (<a href=\"http://hginit.com/\" target=\"_blank\">hginit.com</a>), which will help a lot of new users. Spolsky’s company, Fog Creek Software, has recently released Kiln, a commercial wrapper around the Hg core.</p>",
      "poll": "http://static.polldaddy.com/p/7599286.js",
      "source": "<p>To better understand why Git and Plastic SCM merging is better the one provided by Hg check <a href='http://codicesoftware.blogspot.com/2012/01/more-on-recursive-merge-strategy.html'_blank'>this blog post</a>."
    },
    {
      "generation": "5th",
      "name": "Plastic 3",
      "full_name": "Plastic SCM",
      "year": "2006",
      "picture_url": "plastic-3.png",
      "picture_caption": "Plastic 3 Stealth Sword",
      "body": "<p>Plastic is a DVCS with a focus on branching and merging (it features the <a href='http://plasticscm.com/mergemachine/index.html' target='_blank'>most powerful merge engine</a>) and <a href='http://plasticscm.com/branch-explorer/index.html' target='_blank'>ease of use through visualization</a></p><p>Plastic breaks most of the <a href='http://codicesoftware.blogspot.com/2012/02/dvcs-myths-facts.html' target='_blank'>barriers of open source DVCS</a>:</p><ul><li>It can work centralized too (the only one truly allowing the two modes).</li><li>It supports huge binaries (required in the <a href='http://plasticscm.com/plastic4gaming/index.html' target='_blank'>gaming industry</a> among others).</li><li>It features <a href='http://plasticscm.com/under-heavy-load/index.html' target='_blank'>really high scalability</a>.</li><li>And <a href='http://www.plasticscm.com/features/security.html' target='_blank'>ACL based security</a>.</li></ul><p>One of the key features in Plastic SCM is the way it visualizes branches and merges through the <a href='http://plasticscm.com/branch-explorer/index.html' target='_blank'>Branch Explorer</a>.</p><p>Plastic speaks the Git network protocol and can directly push and pull to Git servers with <a href='http://plasticscm.com/gitsync/index.html' target='_blank'>GitSync</a>.</p><p>Unlike most of the DVCS it doesn’t come from open source: it was designed with commercial use in mind from day one.</p><p>Plastic is built around the concept of parallel development, encouraging use of the <a href='ddd' target='_blank'>\"branch per task\" pattern</a> (feature branches).</p><p>Plastic is free for open source and a Community Edition (free for teams up to 15 developers) is available too.</p>",
      "poll": "http://static.polldaddy.com/p/7599289.js"
    },
    {
      "generation": "5th",
      "name": "Bazaar",
      "picture_url": "5th-group.png",
      "body": "<p>Bazaar (bzr) is another open-source DVCS, which tries to provide some fresh air to the SCM world. While less used than Git and Mercurial, Bazaar features interesting features, such as the ability to work in a centralized way, if needed. (The “pure” DVCSs didn’t include central servers in their original design.)</p><p>Bazaar was developed by Canonical (yes, the Ubuntu company!) and became GNU in early 2008.</p>",
      "poll": "http://static.polldaddy.com/p/7599716.js"
    },
    {
      "generation": "5th",
      "name": "Fossil",
      "year": "2006",
      "picture_url": "5th-group.png",
      "body": "<p>Fossil was initially released in 2006 and belongs to the DVCS era. It was created by the Richard Hipp (of SQLite fame) and it includes interesting features like an integrated wiki and bug tracker.</p>",
      "poll": "http://static.polldaddy.com/p/7599720.js",
      "source": "<p><strong>Source:</strong> <a href='http://www.fossil-scm.org/index.html/doc/tip/www/index.wiki' target='_blank'>here</a>"
    },
    {
      "generation": "5th",
      "name": "Open CM",
      "year": "2010?",
      "picture_url": "5th-group.png",
      "body": "<p>Body-copy...</p>",
      "poll": "http://static.polldaddy.com/p/7599728.js"
    },
    {
      "generation": "5-5th",
      "name": "Plastic 4",
      "year": "2012?",
      "picture_url": "plastic-4.png",
      "picture_caption": "Plastic 4 Stratospheric Arrow",
      "body": "<p>Plastic is a DVCS system designed with commercial use in mind instead of open-source projects (unlike Git and Mercurial). Plastic was first released in late 2006, featuring strong branching and merging, including full merge tracking and rename support in merges. It provides a highly graphical working environment, with many data-visualization capabilities, including a 3D revision tree). This distinguishes it from DVCSs that are oriented toward the hard-core, CLI-oriented hacker community.</p><p>The motivation of Plastic’s developers (BTW, I’m one of them) is to target small and medium teams, closing the gap between expensive high-end systems like ClearCase and low-end ones like SVN.</p><p>Plastic is built around the concept of parallel development, encouraging use of the <a href=\"http://codicesoftware.blogspot.com/2010/11/fixing-bug-branch-per-task-way.html\" target=\"_blank\">\"branch per task\" pattern</a> (feature branches). It can handle thousands of branches without breaking a sweat. Plastic is also distributed, supporting disconnected development, pushing and pulling of changesets on branches, and conflict resolution.</p><p>A Community Edition of Plastic SCM was launched in November 2010.</p>",
      "poll": "http://static.polldaddy.com/p/7599293.js"
    },
    {
      "generation": "6th",
      "name": "Plastic 5",
      "year": "2013",
      "picture_url": "plastic-4.png",
      "picture_caption": "Plastic 5 Galactic Pulse",
      "body": "<p>Plastic is a DVCS system designed with commercial use in mind instead of open-source projects (unlike Git and Mercurial). Plastic was first released in late 2006, featuring strong branching and merging, including full merge tracking and rename support in merges. It provides a highly graphical working environment, with many data-visualization capabilities, including a 3D revision tree). This distinguishes it from DVCSs that are oriented toward the hard-core, CLI-oriented hacker community.</p><p>The motivation of Plastic’s developers (BTW, I’m one of them) is to target small and medium teams, closing the gap between expensive high-end systems like ClearCase and low-end ones like SVN.</p><p>Plastic is built around the concept of parallel development, encouraging use of the <a href=\"http://codicesoftware.blogspot.com/2010/11/fixing-bug-branch-per-task-way.html\" target=\"_blank\">\"branch per task\" pattern</a> (feature branches). It can handle thousands of branches without breaking a sweat. Plastic is also distributed, supporting disconnected development, pushing and pulling of changesets on branches, and conflict resolution.</p><p>A Community Edition of Plastic SCM was launched in November 2010.</p>",
      "poll": "http://static.polldaddy.com/p/7599295.js"
    }
  ]


}